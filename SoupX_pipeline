sessionInfo()
R version 4.1.1 (2021-08-10)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04.2 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
LAPACK: /home/relgamal/.conda/envs/reticulate/lib/libmkl_rt.so.1

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats4    stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
 [1] SoupX_1.6.1               knitr_1.40               
 [3] forcats_0.5.1             stringr_1.4.1            
 [5] purrr_0.3.5               readr_2.1.2              
 [7] tidyr_1.2.1               tibble_3.1.8             
 [9] tidyverse_1.3.2           ggpubr_0.4.0             
[11] data.table_1.14.4         harmony_0.1.0            
[13] Rcpp_1.0.9                Matrix_1.5-1             
[15] ggplot2_3.4.0             dplyr_1.0.10             
[17] EnsDb.Hsapiens.v86_2.99.0 ensembldb_2.18.3         
[19] AnnotationFilter_1.18.0   GenomicFeatures_1.46.4   
[21] AnnotationDbi_1.56.2      Biobase_2.54.0           
[23] Signac_1.7.0              sp_1.5-0                 
[25] SeuratObject_4.1.2        Seurat_4.2.0             
[27] hdf5r_1.3.5               GenomicRanges_1.46.1     
[29] GenomeInfoDb_1.30.1       IRanges_2.28.0           
[31] S4Vectors_0.32.4          BiocGenerics_0.40.0      

loaded via a namespace (and not attached):
  [1] utf8_1.2.2                  reticulate_1.26            
  [3] tidyselect_1.2.0            RSQLite_2.2.15             
  [5] htmlwidgets_1.5.4           grid_4.1.1                 
  [7] BiocParallel_1.28.3         Rtsne_0.16                 
  [9] munsell_0.5.0               codetools_0.2-18           
 [11] ica_1.0-3                   pbdZMQ_0.3-7               
 [13] future_1.28.0               miniUI_0.1.1.1             
 [15] withr_2.5.0                 spatstat.random_2.2-0      
 [17] colorspace_2.0-3            progressr_0.11.0           
 [19] filelock_1.0.2              uuid_1.1-0                 
 [21] ROCR_1.0-11                 ggsignif_0.6.3             
 [23] tensor_1.5                  listenv_0.8.0              
 [25] MatrixGenerics_1.6.0        repr_1.1.4                 
 [27] GenomeInfoDbData_1.2.7      polyclip_1.10-0            
 [29] bit64_4.0.5                 parallelly_1.32.1          
 [31] vctrs_0.5.0                 generics_0.1.3             
 [33] xfun_0.34                   BiocFileCache_2.2.1        
 [35] R6_2.5.1                    bitops_1.0-7               
 [37] spatstat.utils_2.3-1        cachem_1.0.6               
 [39] DelayedArray_0.20.0         assertthat_0.2.1           
 [41] promises_1.2.0.1            BiocIO_1.4.0               
 [43] scales_1.2.1                googlesheets4_1.0.0        
 [45] rgeos_0.5-9                 gtable_0.3.1               
 [47] globals_0.16.1              goftest_1.2-3              
 [49] rlang_1.0.6                 RcppRoll_0.3.0             
 [51] splines_4.1.1               rstatix_0.7.0              
 [53] rtracklayer_1.54.0          lazyeval_0.2.2             
 [55] gargle_1.2.1                broom_1.0.1                
 [57] spatstat.geom_2.4-0         modelr_0.1.8               
 [59] yaml_2.3.6                  reshape2_1.4.4             
 [61] abind_1.4-5                 backports_1.4.1            
 [63] httpuv_1.6.6                tools_4.1.1                
 [65] ellipsis_0.3.2              spatstat.core_2.4-4        
 [67] RColorBrewer_1.1-3          ggridges_0.5.4             
 [69] plyr_1.8.7                  base64enc_0.1-3            
 [71] progress_1.2.2              zlibbioc_1.40.0            
 [73] RCurl_1.98-1.7              prettyunits_1.1.1          
 [75] rpart_4.1.16                deldir_1.0-6               
 [77] pbapply_1.5-0               cowplot_1.1.1              
 [79] zoo_1.8-11                  haven_2.4.3                
 [81] SummarizedExperiment_1.24.0 ggrepel_0.9.1              
 [83] cluster_2.1.2               fs_1.5.2                   
 [85] magrittr_2.0.3              scattermore_0.8            
 [87] reprex_2.0.1                lmtest_0.9-40              
 [89] RANN_2.6.1                  googledrive_2.0.0          
 [91] ProtGenerics_1.26.0         fitdistrplus_1.1-8         
 [93] matrixStats_0.62.0          hms_1.1.1                  
 [95] patchwork_1.1.2             mime_0.12                  
 [97] evaluate_0.17               xtable_1.8-4               
 [99] XML_3.99-0.10               readxl_1.3.1               
[101] gridExtra_2.3               compiler_4.1.1             
[103] biomaRt_2.50.3              KernSmooth_2.23-20         
[105] crayon_1.5.2                htmltools_0.5.3            
[107] tzdb_0.3.0                  mgcv_1.8-38                
[109] later_1.3.0                 lubridate_1.8.0            
[111] DBI_1.1.3                   dbplyr_2.1.1               
[113] MASS_7.3-58                 rappdirs_0.3.3             
[115] car_3.1-1                   cli_3.4.1                  
[117] parallel_4.1.1              igraph_1.3.4               
[119] pkgconfig_2.0.3             GenomicAlignments_1.30.0   
[121] IRdisplay_1.1               plotly_4.10.0              
[123] spatstat.sparse_2.1-1       xml2_1.3.3                 
[125] XVector_0.34.0              rvest_1.0.2                
[127] digest_0.6.30               sctransform_0.3.5          
[129] RcppAnnoy_0.0.19            spatstat.data_2.2-0        
[131] Biostrings_2.62.0           cellranger_1.1.0           
[133] leiden_0.4.3                fastmatch_1.1-3            
[135] uwot_0.1.14                 restfulr_0.0.15            
[137] curl_4.3.3                  shiny_1.7.2                
[139] Rsamtools_2.10.0            rjson_0.2.21               
[141] lifecycle_1.0.3             nlme_3.1-158               
[143] jsonlite_1.8.3              carData_3.0-5              
[145] viridisLite_0.4.1           fansi_1.0.3                
[147] pillar_1.8.1                lattice_0.20-45            
[149] KEGGREST_1.34.0             fastmap_1.1.0              
[151] httr_1.4.4                  survival_3.2-13            
[153] glue_1.6.2                  png_0.1-7                  
[155] bit_4.0.4                   stringi_1.7.8              
[157] blob_1.2.3                  memoise_2.0.1              
[159] IRkernel_1.3                irlba_2.3.5.1              
[161] future.apply_1.9.1 

#######################################################################################################################################################

install.packages("SoupX")
library(SoupX)
library(Seurat)
library(dplyr)
library(tidyverse)
library(data.table)

samples <- c("HPAP-019","HPAP-020","HPAP-021","HPAP-022","HPAP-023","HPAP-024","HPAP-026","HPAP-027","HPAP-028","HPAP-029","HPAP-032","HPAP-034","HPAP-035","HPAP-036","HPAP-037","HPAP-038", "HPAP-039", "HPAP-040", "HPAP-042","HPAP-043","HPAP-044", "HPAP-045", "HPAP-047","HPAP-049", "HPAP-050","HPAP-052", "HPAP-053", "HPAP-054", "HPAP-055", "HPAP-056","HPAP-059","HPAP-063","HPAP-064","HPAP-071","HPAP-072","HPAP-074","HPAP-075","HPAP-077","HPAP-080","HPAP-082","HPAP-084","HPAP-087","HPAP-092","HPAP-093","HPAP-099","HPAP-101","HPAP-103","HPAP-104","HPAP-105", "HPAP-107")

for (sample in samples){
    wd <- sprintf('/path/to/data/here/Upenn_scRNAseq/cellranger_RME/%s/outs', samples)
    }

############## Automated Version of SoupX ##############

for (x in wd){
    name <- str_split_fixed(x, "/", n=12)[9] #Adjust this to output your sample name
    rna_counts <- Read10X_h5(file.path(x, 'raw_feature_bc_matrix.h5'))
    data <- CreateSeuratObject(counts=rna_counts)
    data[['percent.mt']] <- PercentageFeatureSet(data, pattern = '^MT-')
    data <- subset(x = data, subset = nFeature_RNA > 500)
    data <- subset(x = data, subset = nFeature_RNA < 4000)
    
    #Running sctransform takes into account sequencing depth at each cell
    #data <- SCTransform(data, vars.to.regress = "percent.mt", verbose = FALSE,return.only.var.genes = FALSE)
    #data <- SCTransform(data, verbose = FALSE)
    
    #Log normalization alternative to sctransform
    data <- NormalizeData(data, normalization.method = "LogNormalize", scale.factor = 10000)
    data <- FindVariableFeatures(data, selection.method = "vst", nfeatures = 2000)
    all.genes <- rownames(data)
    data <- ScaleData(data, features = all.genes)
    
    data <- RunPCA(data, verbose = FALSE)
    data <- RunUMAP(data, dims = 1:30, verbose = FALSE)
    data <- FindNeighbors(data, dims = 1:30, verbose = FALSE)
    data <- FindClusters(data, algorithm=4, resolution = 1, verbose=FALSE)
    
    #Read in RNA assay counts from our filtered seurat object
    DefaultAssay(data) <- 'RNA'
    toc <- GetAssayData(object = data, slot = "counts") #with nFeature >500 filter
    tod <- Seurat::Read10X_h5(file.path(x, 'raw_feature_bc_matrix.h5')) #raw count matrix
    
    #Pull out the required metadata from the clustered filtered adata object
    #We need the UMAP coordinates (RD1 and RD2) and the cluster assignments at minimum
    metadata <- (cbind(as.data.frame(data[["umap"]]@cell.embeddings),
                   as.data.frame(Idents(data)),
                   as.data.frame(Idents(data))))
    colnames(metadata) <- c("RD1","RD2","Cluster","Annotation")
    
    #Create the SoupChannel Object
    sc <- SoupChannel(tod,toc)
    
    #Add in the metadata (dimensionality reduction UMAP coords and cluster assignments)
    sc <- setDR(sc,metadata[colnames(sc$toc),c("RD1","RD2")])
    sc <- setClusters(sc,setNames(metadata$Cluster,rownames(metadata)))
    sc <- autoEstCont(sc)
    out <- adjustCounts(sc)
    
    #Create post-SoupX Seurat Object
    data2 <- CreateSeuratObject(out)
    data2[['percent.mt']] <- PercentageFeatureSet(data2, pattern = '^MT-')
    data2 <- NormalizeData(data2, normalization.method = "LogNormalize", scale.factor = 10000)  #Can be changed to sctransform
    data2 <- FindVariableFeatures(data2, selection.method = "vst", nfeatures = 2000)
    all.genes <- rownames(data2)
    data2 <- ScaleData(data2, features = all.genes)
    data2 <- RunPCA(data2, verbose = FALSE)
    data2 <- RunUMAP(data2, dims = 1:30, verbose = FALSE)
    data2 <- FindNeighbors(data2, dims = 1:30, verbose = FALSE)
    data2 <- FindClusters(data2, algorithm=4, resolution = 1, verbose=FALSE)
    saveRDS(data2, file = sprintf("~/soupX_%s_automated.rds",name))
    }

############## Gene Selection Version of SoupX ##############
#This method requires you to input marker genes that should be cluster/cell-type specific ie. INS in beta cells
 
contam_frac_results0 <- NULL
contam_frac_results <- data.frame() #contam_frac_results will be a dataframe with all samples and their contamination fraction estimates

for (x in wd){
    name <- str_split_fixed(x, "/", n=12)[9] #Adjust this to output your sample name
    inputdata.10x <- Read10X_h5(file.path(x, 'raw_feature_bc_matrix.h5'))
    rna_counts <- inputdata.10x
    data <- CreateSeuratObject(counts=rna_counts)
    data[['percent.mt']] <- PercentageFeatureSet(data, pattern = '^MT-')
    data <- subset(x = data, subset = nFeature_RNA > 500)
    data <- subset(x = data, subset = nFeature_RNA < 4000)
    
    #Running sctransform takes into account sequencing depth at each cell
    #data <- SCTransform(data, vars.to.regress = "percent.mt", verbose = FALSE,return.only.var.genes = FALSE)
    #data <- SCTransform(data, verbose = FALSE)
    
    #Log normalization alternative to sctransform
    data <- NormalizeData(data, normalization.method = "LogNormalize", scale.factor = 10000)
    data <- FindVariableFeatures(data, selection.method = "vst", nfeatures = 2000)
    all.genes <- rownames(data)
    data <- ScaleData(data, features = all.genes)
    
    data <- RunPCA(data, verbose = FALSE)
    data <- RunUMAP(data, dims = 1:30, verbose = FALSE)
    data <- FindNeighbors(data, dims = 1:30, verbose = FALSE)
    data <- FindClusters(data, algorithm=4, resolution = 1, verbose=FALSE)
    
    DefaultAssay(data) <- 'RNA'
    toc <- GetAssayData(object = data, slot = "counts") #with nFeature filter
    tod <- Seurat::Read10X_h5(file.path(x, 'raw_feature_bc_matrix.h5')) #raw count matrix
    
    metadata <- (cbind(as.data.frame(data[["umap"]]@cell.embeddings),
                   as.data.frame(Idents(data)),
                   as.data.frame(Idents(data))))
    colnames(metadata) <- c("RD1","RD2","Cluster","Annotation")
    
    sc <- SoupChannel(tod,toc)
    sc <- setDR(sc,metadata[colnames(sc$toc),c("RD1","RD2")])
    sc <- setClusters(sc,setNames(metadata$Cluster,rownames(metadata)))
    
    alphaGenes = c("GCG")
    betaGenes = c("INS")
    acinarGenes = c("REG1A")
    deltaGenes = c("SST")
    
    useToEst <- estimateNonExpressingCells(sc, nonExpressedGeneList = list(B=betaGenes, C=acinarGenes, A = alphaGenes, D= deltaGenes),)
    sc <- calculateContaminationFraction(sc,list(B=betaGenes, C=acinarGenes, A = alphaGenes, D = deltaGenes),useToEst=useToEst)
    contamination_fraction <- mean(sc$metaData$rho*100)
    
    contam_frac_results0$Sample <- name
    contam_frac_results0$ContaminationFraction <- contamination_fraction
    contam_frac_results <- rbind(contam_frac_results, contam_frac_results0)
    
    out <- adjustCounts(sc)
    data2 <- CreateSeuratObject(out)
    data2[['percent.mt']] <- PercentageFeatureSet(data2, pattern = '^MT-')
    data2 <- NormalizeData(data2, normalization.method = "LogNormalize", scale.factor = 10000) #Can be changed to sctransform
    data2 <- FindVariableFeatures(data2, selection.method = "vst", nfeatures = 2000)
    all.genes <- rownames(data2)
    data2 <- ScaleData(data2, features = all.genes)
    data2 <- RunPCA(data2, verbose = FALSE)
    data2 <- RunUMAP(data2, dims = 1:30, verbose = FALSE)
    data2 <- FindNeighbors(data2, dims = 1:30, verbose = FALSE)
    data2 <- FindClusters(data2, algorithm=4, resolution = 1, verbose=FALSE)
    saveRDS(data2, file = sprintf("~/soupX_%s_gene_selection.rds",name))
    }
    
############## Merging Samples to single RDS Post-SoupX ##############
    
setwd("~/SoupX/")
soupx_files <- list.files("~/SoupX/", pattern="automated.rds")
soupx_data <- list()

for (x in soupx_files){
    sample_name <- str_split_fixed(x, "_", n=4)[2]  #adjust to output your sample name
    tmp <- readRDS(x)
    soupx_data[[sample_name]] <- tmp
}
   
soupx_merged_data <- merge(soupx_data[[samples[[1]]]], y=soupx_data[samples[2:length(samples)]], add.cell.ids=samples, project='HPAP')
soupx_merged_data$library <- substr(rownames(soupx_merged_data@meta.data),1,8)
soupx_merged_data
